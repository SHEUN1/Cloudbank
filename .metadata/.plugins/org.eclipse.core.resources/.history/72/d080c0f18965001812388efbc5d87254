/*
 * SeperateObjects.cpp
 *
 *  Created on: 9 Jul 2017
 *      Author: sheun
 *
 *      Separate objects/regions in an image and draw bounded boxes around them in the original captured image frame.
 */

#include "SeperateObjects.h"

SeperateObjects::SeperateObjects() {

	std::cout<<"identyfying objects in seperate objects class"<<std::endl;

}


/**
	 *****************************************************************************************
	 *  @brief      identify objects and get their X and Y coordinates in the image frame
	 *
	 *  @usage      draw boxes around each object/region,
	 *  			create a vector of separated objects/regions
	 *  			get coordinates of each object/region
	 *  			get boundedbox of each object/region
	 *
	 *
	 *  @param      Binary image
	 *  @param      grayscale image
	 *  @param      Original (non- processed) image frame
	 *  @param      indicate which directory to save separated object/regions images (only effective is last parameter is set to "true"). 0 = darkworld/non-contrasted binary image; 1 = lightworld/contrasted binary image
	 *  @param      vector which will hold x coordinates of each object/region
	 *  @param      vector which will hold y coordinates of each object/region
	 *  @param 		vector<Rect> boundRectWorld will hold the corner points of the rectangle that acts as the bounded box
	 *  @param 		true = save separated objects/regions in directory of your choice
	 *
	 *  @return     vector of object/regions
	 ****************************************************************************************/

std::vector <cv::UMat>  SeperateObjects::BoundBox(cv::UMat Binary, cv::UMat origanal_image,cv::UMat& Original_image_clone, int world_number, std::vector<int>& x_coordinate, std::vector<int>& y_coordinate, std::vector<cv::Rect> &boundRectWorld, bool save_image_result)
{
	//bounded box will be draw on this copy of the original image instead
	std::vector<std::vector<cv::Point> > contours;
	std::vector<cv::Vec4i> hierarchy;

	//find contours
	findContours(Binary, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, cv::Point(0,0));

	 /// Get the moments(weighted average of image pixels intensities )
	  std::vector<cv::Moments> mu(contours.size());
	  for( uint32_t i = 0; i < contours.size(); i++ )
	     { mu[i] = moments( contours[i], false ); }

	  ///  Get the mass centres:
	    std::vector<cv::Point2f> mc( contours.size() );
	    for( uint32_t i = 0; i < contours.size(); i++ )
	       { mc[i] = cv::Point2f( mu[i].m10/mu[i].m00 , mu[i].m01/mu[i].m00 ); }

	//Approximate contours to polygons + get bounding rects
	std::vector<std::vector<cv::Point> > contours_poly(contours.size());
	std::vector<cv::Rect> boundRect;
	//region of interest
	std::vector<cv::UMat> roi;
	//get image coordinate;
	std::vector<int> x2_coordinate;
	std::vector<int> y2_coordinate;


	//character length for roi filename to be saved in separate folder
	char file [100];
	int lock_dark_file = 0 ;
	int lock_light_file = 0;

	//delete all images in a folder
	if ( save_image_result == true)
	{
		if (lock_dark_file == 0 && world_number == 0){
			system("exec rm -rf ../game_vision/cloudbank_images/objects/trasistor_vision_darkworld_images/*");
			lock_dark_file++;
		}

		if (lock_light_file == 0 && world_number == 1) {
			system("exec rm -rf ../game_vision/cloudbank_images/objects/trasistor_vision_lightworld_images/*");
			lock_light_file++;
		}
	}


	for(uint32_t i = 0; i < contours.size(); i++)
	{

		approxPolyDP(cv::UMat(contours[i]).getMat(cv::ACCESS_RW), contours_poly[i], 3, true);

		if (((boundingRect(cv::UMat(contours_poly[i])).width == origanal_image.cols) && (boundingRect(cv::UMat(contours_poly[i])).height == origanal_image.rows)))
		{
			continue;
		}


		boundRect.push_back(boundingRect(cv::UMat(contours_poly[i])));

		boundRectWorld.push_back(boundRect.back());
		x2_coordinate.push_back(((boundRect.back().x + boundRect.back().width) / 2));
		y2_coordinate.push_back(((boundRect.back().y + boundRect.back().height) / 2));

		cv::Scalar color( rand()&255, rand()&255, rand()&255 );
		rectangle (Original_image_clone, boundRect.back().tl(), boundRect.back().br(), color, 2,8,0);

		// Crop the original image to the defined ROI
		roi.push_back(origanal_image(boundRect.back()));
	    //save regions of interest into a folder

	    if ( save_image_result == true)
	    {
			if (world_number == 0)
			{
				//if (lock_dark_file == 0) {system("exec rm -r ../game_vision/cloudbank_images/objects/trasistor_vision_darkworld_images/*");lock_dark_file++; }
				sprintf(file,"../game_vision/cloudbank_images/objects/trasistor_vision_darkworld_images/Image%d.jpg",i);
			}
			else if(world_number == 1)
			{
				//if (lock_light_file == 0) {system("exec rm -r ../game_vision/cloudbank_images/objects/trasistor_vision_lightworld_images/*");lock_light_file++; }
				sprintf(file,"../game_vision/cloudbank_images/objects/trasistor_vision_lightworld_images/Image%d.jpg",i);
			}

			imwrite(file,roi.back());
		}


	}
	x_coordinate = x2_coordinate;
	y_coordinate = y2_coordinate;


	return roi;
}

