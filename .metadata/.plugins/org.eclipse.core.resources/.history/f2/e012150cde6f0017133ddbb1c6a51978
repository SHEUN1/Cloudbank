/*
 * SeperateObjects.cpp
 *
 *  Created on: 9 Jul 2017
 *      Author: sheun
 */

#include "SeperateObjects.h"
//#include <vector>
//#include <stdlib.h>

//using namespace std;
//RNG rng(12345);
SeperateObjects::SeperateObjects() {

	std::cout<<"identyfying objects"<<endl;

}

SeperateObjects::~SeperateObjects() {

}
//Private function. pass a bounded box as a parameter and get the 4 corressponding corner points.
Point* SeperateObjects::get_corner_points (Rect box)
{
	  cv::Rect roi;
	    roi.x = box.x - (box.size.height / 2);
	    roi.y = box.y - (box.size.width / 2);
	    roi.width = box.size.height;
	    roi.height = box.size.width;
	    std::cout << "roi @ " << roi.x << "," << roi.y << " " << roi.width << "x" << roi.height << std::endl;

	    // Crop the original image to the defined ROI
	    cv::Mat crop = img(roi);
	return cornerpoints;

}

Mat1b SeperateObjects::BoundBox(Mat1b Binary, Mat1b origanal_image)
{
	vector<vector<Point> > contours;
	vector<Vec4i> hierarchy;

	//find contours
	findContours(Binary, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0,0));

	 /// Get the moments(weighted average of image pixels intensities )
	  vector<Moments> mu(contours.size());
	  for( uint32_t i = 0; i < contours.size(); i++ )
	     { mu[i] = moments( contours[i], false ); }

	  ///  Get the mass centres:
	    vector<Point2f> mc( contours.size() );
	    for( uint32_t i = 0; i < contours.size(); i++ )
	       { mc[i] = Point2f( mu[i].m10/mu[i].m00 , mu[i].m01/mu[i].m00 ); }

	//Approximate contours to polygons + get bounding rects
	vector<vector<Point> > contours_poly(contours.size());
	vector<Rect> boundRect(contours.size());
	//get image coordinate;
	vector<int>x_coordinate( contours.size() );
	vector<int>y_coordinate( contours.size() );


	for(uint32_t i = 0; i < contours.size(); i++)
	{
		approxPolyDP(Mat(contours[i]), contours_poly[i], 3, true);
		boundRect[i] = boundingRect(Mat(contours_poly[i]));
		x_coordinate[i] = boundRect[i].x;
		y_coordinate[i] = boundRect[i].y;
		get_corner_points(boundRect[i]);

	}

	for (uint32_t i = 0; i<contours.size(); i++)
	{
		//printf(" * Contour[%d] - Area (M_00) = %.2f - Area OpenCV: %.2f - Length: %.2f \n", i, mu[i].m00, contourArea(contours[i]), arcLength( contours[i], true ) );
		//Scalar color = Scalar(rng.uniform(0,255), rng.uniform(0,255), rng.uniform(0,255));
		Scalar color( rand()&255, rand()&255, rand()&255 );
		rectangle (origanal_image, boundRect[i].tl(), boundRect[i].br(), color, 2,8,0);
	}

	return origanal_image;
}

