//============================================================================
// Name        : transistor_vision.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include<iostream>
#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<opencv2/opencv.hpp>
#include<iostream>
#include<vector>
#include <algorithm>

#include "yingyang.h"
#include "SeperateObjects.h"

using namespace std;
using namespace cv;



int main()
{
/*
	//get image
	Mat3b img = imread("/home/sheun/Pictures/transistor_images/transistor2.jpg");
	//Mat3b img2 = imread("/home/sheun/Pictures/binaryCircle.jpg");
	//grayscale, and use imadjust for to get a high constrast version (the base for "lightworld")
	Mat1b gray;
	//convert to grayscale
	cvtColor(img, gray, COLOR_RGB2GRAY);
	//smooth image
	blur(gray, gray, Size(3,3));
    //convert to binary
	ying_yang world_view;
	Mat1b dark_world_view = world_view.binary(gray);
	Mat1b light_world_view = world_view.binary_Inverse(gray);
	//imshow("dark world view", dark_world_view);
	//imshow("light world view", light_world_view);

	SeperateObjects worldObjects;
	Mat1b bound_box_world_dark = worldObjects.BoundBox(dark_world_view, gray); // the 2nd parameter is because we want the boxes to be on the origanal image
	Mat1b bound_box_world_light = worldObjects.BoundBox(light_world_view, gray);
	namedWindow( "Objects for the dark world", CV_WINDOW_NORMAL );
	namedWindow( "Objects for the light world", CV_WINDOW_NORMAL );
	imshow ("Objects for the dark world", bound_box_world_dark);
	imshow ("Objects for the light world", bound_box_world_light);

	cvWaitKey();
	return 0;*/

	cv::Mat img = cv::imread("/home/sheun/Pictures/transistor_images/transistor2.jpg");
	    std::cout << "Original image size: " << img.size() << std::endl;

	    // Convert RGB Mat to GRAY
	    cv::Mat gray;
	    cv::cvtColor(img, gray, CV_BGR2GRAY);
	    std::cout << "Gray image size: " << gray.size() << std::endl;

	    // Erode image to remove unwanted noises
	    int erosion_size = 5;
	    cv::Mat element = cv::getStructuringElement(cv::MORPH_CROSS,
	                                       cv::Size(2 * erosion_size + 1, 2 * erosion_size + 1),
	                                       cv::Point(erosion_size, erosion_size) );
	    cv::erode(gray, gray, element);

	    // Scan the image searching for points and store them in a vector
	    std::vector<cv::Point> points;
	    cv::Mat_<uchar>::iterator it = gray.begin<uchar>();
	    cv::Mat_<uchar>::iterator end = gray.end<uchar>();
	    for (; it != end; it++)
	    {
	        if (*it)
	            points.push_back(it.pos());
	    }

	    // From the points, figure out the size of the ROI
	    int left, right, top, bottom;
	    for (int i = 0; i < points.size(); i++)
	    {
	        if (i == 0) // initialize corner values
	        {
	            left = right = points[i].x;
	            top = bottom = points[i].y;
	        }

	        if (points[i].x < left)
	            left = points[i].x;

	        if (points[i].x > right)
	            right = points[i].x;

	        if (points[i].y < top)
	            top = points[i].y;

	        if (points[i].y > bottom)
	            bottom = points[i].y;
	    }
	    std::vector<cv::Point> box_points;
	    box_points.push_back(cv::Point(left, top));
	    box_points.push_back(cv::Point(left, bottom));
	    box_points.push_back(cv::Point(right, bottom));
	    box_points.push_back(cv::Point(right, top));

	    // Compute minimal bounding box for the ROI
	    // Note: for some unknown reason, width/height of the box are switched.
	    cv::RotatedRect box = cv::minAreaRect(cv::Mat(box_points));
	    std::cout << "box w:" << box.size.width << " h:" << box.size.height << std::endl;

	    // Draw bounding box in the original image (debugging purposes)
	    //cv::Point2f vertices[4];
	    //box.points(vertices);
	    //for (int i = 0; i < 4; ++i)
	    //{
	    //    cv::line(img, vertices[i], vertices[(i + 1) % 4], cv::Scalar(0, 255, 0), 1, CV_AA);
	    //}
	    //cv::imshow("Original", img);
	    //cv::waitKey(0);

	    // Set the ROI to the area defined by the box
	    // Note: because the width/height of the box are switched,
	    // they were switched manually in the code below:
	    cv::Rect roi;
	    roi.x = box.center.x - (box.size.height / 2);
	    roi.y = box.center.y - (box.size.width / 2);
	    roi.width = box.size.height;
	    roi.height = box.size.width;
	    std::cout << "roi @ " << roi.x << "," << roi.y << " " << roi.width << "x" << roi.height << std::endl;

	    // Crop the original image to the defined ROI
	    cv::Mat crop = img(roi);

	    // Display cropped ROI
	    cv::imshow("Cropped ROI", crop);
	    cv::waitKey(0);

	    return 0;
}
