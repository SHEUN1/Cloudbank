/*
 * yingyang.cpp
 *
 *  Created on: 13 Jun 2017
 *      Author: sheun
 */

#include "yingyang.h"

ying_yang::ying_yang() {

cout<<"converting to binary"<<endl;
}

ying_yang::~ying_yang() {

}

 Mat  ying_yang::Watershed(Mat Binary, Mat origanal_image)
{
	// Use the distance transform algorithm
	    Mat dist;
	    distanceTransform(Binary, dist, CV_DIST_L2, 3);
	    // Normalize the distance image for range = {0.0, 1.0}
	    // so we can visualize and threshold it
	    normalize(dist, dist, 0, 1., NORM_MINMAX);

	    // Threshold to obtain the peaks
	    // This will be the markers for the foreground objects
	    threshold(dist, dist, 0.043, 1., CV_THRESH_BINARY);
	    // Dilate a bit the dist image
	    Mat kernel1 = Mat::ones(3, 3, CV_8UC1);
	    dilate(dist, dist, kernel1);


	    // Create the CV_8U version of the distance image
	    // It is needed for findContours()
	    Mat dist_8u;
	    dist.convertTo(dist_8u, CV_8U);
	    // Find total markers
	    vector<vector<Point> > contours;
	    findContours(dist_8u, contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);
	    // Create the marker image for the watershed algorithm
	    Mat markers = Mat::zeros(dist.size(), CV_32SC1);
	    // Draw the foreground markers
	    for (size_t i = 0; i < contours.size(); i++)
	        drawContours(markers, contours, static_cast<int>(i), Scalar::all(static_cast<int>(i)+1), -1);
	    // Draw the background marker
	    circle(markers, Point(5,5), 3, CV_RGB(255,255,255), -1);
	    //imshow("Markers", markers*10000);

	    // Perform the watershed algorithm
	    watershed(origanal_image, markers);
	    Mat mark = Mat::zeros(markers.size(), CV_8UC1);
	    markers.convertTo(mark, CV_8UC1);
	    bitwise_not(mark, mark);
	    cv::Mat region1 = markers==-1;

	    return region1;
}

Mat ying_yang::binary (Mat img,Mat origanal)
{

	 Mat binaryImage;
	 //create binary image
	 threshold(img, binaryImage, 0.5, 255, THRESH_BINARY | CV_THRESH_OTSU);
	 //clean up the binary image i.e. remove small blobs
	 binaryImage = cleanupBinary(binaryImage);
	 Mat Binary_post_watershed = Watershed(binaryImage,  origanal);


	 return Binary_post_watershed;
}
Mat ying_yang::binary_Inverse (Mat img,Mat origanal)
{
	double alpha = 2.2;//contrast control
	int beta = 50;//brightness control
	Mat contrasted, binaryImage, binaryImage_inv;
	img.convertTo(contrasted, -1, alpha, beta);

	threshold(contrasted, binaryImage,0.5,255,THRESH_BINARY| CV_THRESH_OTSU);
	binaryImage = cleanupBinary(binaryImage);
	//inverse the binary image
	binaryImage_inv = cv::Scalar::all(255)-binaryImage ;
	Mat Binary_post_watershed = Watershed(binaryImage_inv,  origanal);


	return Binary_post_watershed;
}




//remove  small blobs in binary images
Mat ying_yang::cleanupBinary(Mat Binary)
{
		Mat se1 = getStructuringElement(MORPH_RECT, Size(10, 10));
	    Mat se2 = getStructuringElement(MORPH_RECT, Size(4, 4));

	    // Perform closing then opening
	    Mat mask;
	    morphologyEx(Binary, mask, MORPH_CLOSE, se1);
	    morphologyEx(mask, mask, MORPH_OPEN, se2);

	    // Filter the output
	    Mat out = Binary.clone();
	    out.setTo(Scalar(0), mask == 0);

	    return out;
}
